{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,6DAA0D;AAC1D,+CAA4C;AAC5C,2CAAqD;AACrD,qDAAkD;AAElD,SAAgB,OAAO,CAAC,WAAmB,EAC1C,eAAgC,EAChC,aAAa,GAAG,EAAE,EAClB,cAAc,GAAG,CAAC,EAClB,cAAc,GAAG,CAAC;IAGlB,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IAClC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;IACtC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IACxC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IAExC,IAAI,CAAC,IAAA,2BAAY,EAAC,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,EACrC,CAAC;QACA,MAAM,IAAI,KAAK,CAAC,0CAA0C,GAAG,WAAW,GAAG,uBAAuB,CAAC,CAAC;IACrG,CAAC;IACD,IAAI,CAAC,IAAA,2BAAY,EAAC,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC,EACvC,CAAC;QACA,MAAM,IAAI,KAAK,CAAC,4CAA4C,GAAG,aAAa,GAAG,uBAAuB,CAAC,CAAC;IACzG,CAAC;IACD,IAAI,CAAC,IAAA,2BAAY,EAAC,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC,EACxC,CAAC;QACA,MAAM,IAAI,KAAK,CAAC,qCAAqC,GAAG,cAAc,GAAG,uBAAuB,CAAC,CAAC;IACnG,CAAC;IACD,IAAI,CAAC,IAAA,2BAAY,EAAC,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC,EACxC,CAAC;QACA,MAAM,IAAI,KAAK,CAAC,qCAAqC,GAAG,cAAc,GAAG,uBAAuB,CAAC,CAAC;IACnG,CAAC;IAED,IAAI,WAAW,GAAoB,MAAM,CAAC,eAAe,CAAC,CAAC;IAE3D,IAAI,aAAa,IAAI,EAAE,EACvB,CAAC;QACA,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;IACzC,CAAC;IAED,IAAA,mCAAgB,EAAC,WAAW,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;IAE9D,IAAI,aAAa,KAAK,EAAE,EACxB,CAAC;QACA,WAAW,GAAG,IAAA,mBAAS,EAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IACrD,CAAC;SAED,CAAC;QACA,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,WAAW,KAAK,EAAE,EACtB,CAAC;QACA,WAAW,GAAG,IAAA,mBAAS,EAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACnD,CAAC;IAED,WAAW,GAAG,IAAA,qBAAS,EAAC,MAAM,CAAC,WAAW,CAAC,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;IAE7E,IAAI,eAAe,KAAK,EAAE,EAC1B,CAAC;QACA,OAAO,GAAG,CAAC;IACZ,CAAC;IAED,OAAO,WAAW,CAAC;AACpB,CAAC;AA5DD,0BA4DC;AAED,kBAAe,OAAO,CAAA","sourcesContent":["import { assertNumberBase } from './lib/assertNumberBase';\nimport { padNumber } from './lib/padNumber';\nimport { decToBase, baseToDec } from './lib/convert';\nimport { isIntBetween } from './lib/isIntBetween';\n\nexport function anybase(target_base: number,\n\toriginal_number: string | number,\n\toriginal_base = 10,\n\tminimum_digits = 0,\n\tmaximum_digits = 0,\n): string\n{\n\ttarget_base = Number(target_base);\n\toriginal_base = Number(original_base);\n\tminimum_digits = Number(minimum_digits);\n\tmaximum_digits = Number(maximum_digits);\n\n\tif (!isIntBetween(target_base, 2, 62))\n\t{\n\t\tthrow new Error('Invalid target numeric base specified: `' + target_base + '` (expected: 2 .. 62)');\n\t}\n\tif (!isIntBetween(original_base, 2, 62))\n\t{\n\t\tthrow new Error('Invalid original numeric base specified: `' + original_base + '` (expected: 2 .. 62)');\n\t}\n\tif (!isIntBetween(minimum_digits, 0, 64))\n\t{\n\t\tthrow new Error('Invalid minimum digits requested: `' + minimum_digits + '` (expected: 1 .. 64)');\n\t}\n\tif (!isIntBetween(maximum_digits, 0, 64))\n\t{\n\t\tthrow new Error('Invalid minimum digits requested: `' + maximum_digits + '` (expected: 1 .. 64)');\n\t}\n\n\tlet returnValue: number | string = String(original_number);\n\n\tif (original_base <= 16)\n\t{\n\t\treturnValue = returnValue.toUpperCase();\n\t}\n\n\tassertNumberBase(returnValue, original_number, original_base);\n\n\tif (original_base !== 10)\n\t{\n\t\treturnValue = baseToDec(returnValue, original_base);\n\t}\n\telse\n\t{\n\t\treturnValue = Number(returnValue);\n\t}\n\n\tif (target_base !== 10)\n\t{\n\t\treturnValue = decToBase(returnValue, target_base);\n\t}\n\n\treturnValue = padNumber(String(returnValue), minimum_digits, maximum_digits);\n\n\tif (original_number === '')\n\t{\n\t\treturn '0';\n\t}\n\n\treturn returnValue;\n}\n\nexport default anybase\n"]}