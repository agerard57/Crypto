{"version":3,"file":"assertNumberBase.js","sourceRoot":"","sources":["assertNumberBase.ts"],"names":[],"mappings":";;;AAAA,iCAA6B;AAC7B,uCAAoC;AAEpC,SAAgB,gBAAgB,CAAC,GAAW,EAAE,eAAgC,EAAE,aAAqB;IAEpG,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IAErB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAC5B,CAAC;QACA,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,GAAG,UAAG,CAAC,IAAI,CAAC,CAAA;QACnB,IAAI,IAAA,iBAAO,EAAC,CAAC,CAAC,IAAI,CAAC,GAAG,aAAa,EACnC,CAAC;YACA,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,eAAe,GAAG,gBAAgB,GAAG,QAAQ,GAAG,aAAa,GAAG,+BAA+B,GAAG,2CAA2C,CAAC,CAAC;QACjM,CAAC;IACF,CAAC;AACF,CAAC;AAbD,4CAaC","sourcesContent":["import { map } from './data';\nimport { isUnset } from './isUnset';\n\nexport function assertNumberBase(val: string, original_number: number | string, original_base: number): asserts val is string\n{\n\tlet len = val.length;\n\n\tfor (let m = 0; m < len; m++)\n\t{\n\t\tconst char = val[m];\n\t\tconst v = map[char]\n\t\tif (isUnset(v) || v > original_base)\n\t\t{\n\t\t\tthrow new Error('Invalid digit(s) in number `' + original_number + '` for numeric ' + 'base `' + original_base + '` (expected positive integer ' + 'composed of alphanumeric characters only)');\n\t\t}\n\t}\n}\n"]}